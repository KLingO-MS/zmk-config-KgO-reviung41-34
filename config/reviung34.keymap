/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <physical_layouts.dtsi>
#include "keypos_34keys.h"

#define _BASE    0
#define _NAV     1
#define _SYM     2
#define _BTF     3

#define RGB_BASE RGB_COLOR_HSB(0,100,7)
#define RGB_SYM RGB_COLOR_HSB(20,100,5)
#define RGB_NAV RGB_COLOR_HSB(10,100,8)
#define RGB_BTF RGB_COLOR_HSB(250,100,8)

// /delete-node/        zmk,kscan = &kscan0;
// /delete-node/        zmk,matrix_transform = &dual_1u_transform;

/ {
    chosen {
        zmk,physical-layout = &dual_1u_layout;
    };

    dual_1u_layout: dual_1u_layout {
        compatible = "zmk,physical-layout";
        display-name = "Dual 1u Layout";
        transform = <&dual_1u_transform>;
        kscan = <&kscan0>;

                keys  //             w   h    x    y     rot    rx    ry
            = <&key_physical_attrs 100 100    0   50     500   250   150>
            , <&key_physical_attrs 100 100  100   25     500   250   150>
            , <&key_physical_attrs 100 100  200    0     500   250   150>
            , <&key_physical_attrs 100 100  300   25     500   250   150>
            , <&key_physical_attrs 100 100  400   50     500   250   150>
            , <&key_physical_attrs 100 100  600   50   (-500)  850   150>
            , <&key_physical_attrs 100 100  700   25   (-500)  850   150>
            , <&key_physical_attrs 100 100  800    0   (-500)  850   150>
            , <&key_physical_attrs 100 100  900   25   (-500)  850   150>
            , <&key_physical_attrs 100 100 1000   50   (-500)  850   150>
            , <&key_physical_attrs 100 100    0  150     500   250   150>
            , <&key_physical_attrs 100 100  100  125     500   250   150>
            , <&key_physical_attrs 100 100  200  100     500   250   150>
            , <&key_physical_attrs 100 100  300  125     500   250   150>
            , <&key_physical_attrs 100 100  400  150     500   250   150>
            , <&key_physical_attrs 100 100  600  150   (-500)  850   150>
            , <&key_physical_attrs 100 100  700  125   (-500)  850   150>
            , <&key_physical_attrs 100 100  800  100   (-500)  850   150>
            , <&key_physical_attrs 100 100  900  125   (-500)  850   150>
            , <&key_physical_attrs 100 100 1000  150   (-500)  850   150>
            , <&key_physical_attrs 100 100    0  250     500   250   150>
            , <&key_physical_attrs 100 100  100  225     500   250   150>
            , <&key_physical_attrs 100 100  200  200     500   250   150>
            , <&key_physical_attrs 100 100  300  225     500   250   150>
            , <&key_physical_attrs 100 100  400  250     500   250   150>
            , <&key_physical_attrs 100 100  600  250   (-500)  850   150>
            , <&key_physical_attrs 100 100  700  225   (-500)  850   150>
            , <&key_physical_attrs 100 100  800  200   (-500)  850   150>
            , <&key_physical_attrs 100 100  900  225   (-500)  850   150>
            , <&key_physical_attrs 100 100 1000  250   (-500)  850   150>
            , <&key_physical_attrs 100 100  350  350     500   450   350>
            , <&key_physical_attrs 100 100  450  350       0     0     0>
            , <&key_physical_attrs 100 100  550  350       0     0     0>
            , <&key_physical_attrs 100 100  650  350   (-500)  650   350>
            ;

    };

// ------------------------- MACROS --------------------------------
    macros {
        to_BASE: to_BASE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_BASE>
                , <&tog _NAV>
                ;
        };

        // mo_SYM: mo_SYM {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&macro_tap &rgb_ug RGB_SYM>
        //         , <&macro_press &mo _SYM>
        //         , <&macro_pause_for_release>
        //         , <&macro_tap &rgb_ug RGB_BASE>
        //         , <&macro_release &mo _SYM>
        //         ;
        // };

        // to_SYM: to_SYM {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&rgb_ug RGB_SYM>
        //         , <&to _SYM>
        //         ;
        // };

        to_NAV: to_NAV {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_NAV>
                , <&tog _NAV>
                ;
        };

        // mo_NAV: mo_NAV {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&macro_tap &rgb_ug RGB_NAV>
        //         , <&macro_press &mo _NAV>
        //         , <&macro_pause_for_release>
        //         , <&macro_tap &rgb_ug RGB_BASE>
        //         , <&macro_release &mo _NAV>
        //         ;
        // };

        mo_BTF: mo_BTF {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_BTF>
                , <&macro_press &mo _BTF>
                , <&macro_pause_for_release>
                , <&macro_tap &rgb_ug RGB_BASE>
                , <&macro_release &mo _BTF>
                ;
        };

        to_BOOT: to_BOOT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(0,100,100)>
                , <&rgb_ug RGB_ON>
                , <&bootloader>
                ;
        };

        // muc_you: macro_uc_you {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <5>;
        //     bindings
        //         = <&kp LS(Y)>
        //         , <&kp O>
        //         , <&kp U>
        //         ;
        // };

        // mlc_you: macro_lc_you {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <5>;
        //     bindings
        //         = <&kp Y>
        //         , <&kp O>
        //         , <&kp U>
        //         ;
        // };

        // muc_the: macro_uc_the {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <5>;
        //     bindings
        //         = <&kp LS(T)>
        //         , <&kp H>
        //         , <&kp E>
        //         ;
        // };

        // mlc_the: macro_lc_the {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <5>;
        //     bindings
        //         = <&kp T>
        //         , <&kp H>
        //         , <&kp E>
        //         ;
        // };

        // mlc_ing: macro_lc_ing {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <5>;
        //     bindings
        //         = <&kp I>
        //         , <&kp N>
        //         , <&kp G>
        //         ;
        // };

        mlc_qu: macro_lc_qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp Q>
                , <&kp U>
                ;
        };

        // mlc_ould: macro_lc_ould {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <5>;
        //     bindings
        //         = <&kp O>
        //         , <&kp U>
        //         , <&kp L>
        //         , <&kp D>
        //         ;
        // };

    };

    combos {
        compatible = "zmk,combos";
// ------------------------- LAYER COMBOS --------------------------------
        combo_BOOT {
            timeout-ms = <50>;
            require-prior-idle-ms = <200>;
            key-positions = <LMC RMC>;
            bindings = <&to_BOOT>;
            layers = <_BTF>;
        };

        combo_BTF {
            timeout-ms = <50>;
            require-prior-idle-ms = <200>;
            key-positions = <LHO RHO>;
            bindings = <&mo_BTF>;
        };

        combo_NAVR {
            timeout-ms = <50>;
            require-prior-idle-ms = <200>;
            key-positions = <RMI RMM RMR>;
            bindings = <&to_NAV>;
            layers = <_BASE>;
        };

        combo_BASER {
            timeout-ms = <50>;
            require-prior-idle-ms = <200>;
            key-positions = <RMI RMM RMR>;
            bindings = <&to_BASE>;
            layers = <_NAV>;
        };

        combo_NAVL {
            timeout-ms = <50>;
            require-prior-idle-ms = <200>;
            key-positions = <LMI LMM LMR>;
            bindings = <&to_NAV>;
            layers = <_BASE>;
        };

        combo_BASEL {
            timeout-ms = <50>;
            require-prior-idle-ms = <200>;
            key-positions = <LMI LMM LMR>;
            bindings = <&to_BASE>;
            layers = <_NAV>;
        };

// ------------------------- MODS COMBOS --------------------------------
        combo_CAPS {
            timeout-ms = <50>;
            key-positions = <LMI RMI>;
            bindings = <&caps_word>;
            require-prior-idle-ms = <200>;
            layers = <_BASE>;
        };

        // combo_RALTL {
        //     timeout-ms = <40>;
        //     key-positions = <LMP LTP>;
        //     bindings = <&kp RALT>;
        //     //layers = <_BASE>;
        // };

        // combo_RALTR {
        //     timeout-ms = <40>;
        //     key-positions = <LMP RTP>;
        //     bindings = <&kp RALT>;
        //     //layers = <_BASE>;
        // };

// ------------------------- CHARACTER COMBOS --------------------------------
        // combo_OULD {
        //     timeout-ms = <50>;
        //     key-positions = <RTI RTM RTR>;
        //     bindings = <&mlc_ould>;
        //     layers = <_BASE>;
        // };

        // combo_ING {
        //     timeout-ms = <50>;
        //     require-prior-idle-ms = <120>;
        //     key-positions = <RMI RMM RMR>;
        //     bindings = <&mlc_ing>;
        //     layers = <_BASE>;
        // };

        // combo_YOU {
        //     timeout-ms = <50>;
        //     require-prior-idle-ms = <120>;
        //     key-positions = <RTI RTM RTR>;
        //     bindings = <&mm_you>;
        //     layers = <_BASE>;
        // };

        // combo_THE {
        //     timeout-ms = <50>;
        //     require-prior-idle-ms = <120>;
        //     key-positions = <LMI LMM LMR>;
        //     bindings = <&mm_the>;
        //     layers = <_BASE>;
        // };

        combo_QU {
            timeout-ms = <150>;
            // require-prior-idle-ms = <120>;
            key-positions = <RBM RBR>;
            bindings = <&mlc_qu>;
            layers = <_BASE>;
        };

// ------------------------- SYMBOL COMBOS --------------------------------
        combo_LPAR {
            timeout-ms = <45>;
            require-prior-idle-ms = <120>;
            key-positions = <LMM LMI>;
            bindings = <&kp LPAR>;
            layers = <_BASE _SYM>;
        };

        combo_RPAR {
            timeout-ms = <45>;
            require-prior-idle-ms = <120>;
            key-positions = <RMI RMM>;
            bindings = <&kp RPAR>;
            layers = <_BASE _SYM>;
        };

        combo_LBRC {
            timeout-ms = <45>;
            require-prior-idle-ms = <120>;
            key-positions = <LTM LTI>;
            bindings = <&kp LBRC>;
            layers = <_BASE _SYM>;
        };

        combo_RBRC {
            timeout-ms = <45>;
            require-prior-idle-ms = <120>;
            key-positions = <RTI RTM>;
            bindings = <&kp RBRC>;
            layers = <_BASE _SYM>;
        };

        combo_LBKT {
            timeout-ms = <45>;
            require-prior-idle-ms = <120>;
            key-positions = <LBM LBI>;
            bindings = <&kp LBKT>;
            layers = <_BASE _SYM>;
        };

        combo_RBKT {
            timeout-ms = <45>;
            require-prior-idle-ms = <120>;
            key-positions = <RBI RBM>;
            bindings = <&kp RBKT>;
            layers = <_BASE _SYM>;
        };

        combo_GT {
            timeout-ms = <45>;
            require-prior-idle-ms = <200>;
            key-positions = <RMM RMR>;
            bindings = <&kp GT>;
            layers = <_BASE _SYM>;
        };

        combo_LT {
            timeout-ms = <45>;
            require-prior-idle-ms = <200>;
            key-positions = <LMM LMR>;
            bindings = <&kp LT>;
            layers = <_BASE _SYM>;
        };
    };

    behaviors {
// ------------------------- TAP-DANCES --------------------------------
        win_cp: win_cp {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LC(C)>, <&kp LC(V)>, <&kp LC(X)>;
        };

        mac_cp: mac_cp {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LG(C)>, <&kp LG(V)>, <&kp LG(X)>;
        };

// ------------------------- HOLD-TAPS --------------------------------
        /* left-hand HRMs */
        hml: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <250>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        /* right-hand HRMs */
        hmr: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <250>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hsl: hrs_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hsr: hrs_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        bst: backspace-tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <170>;
            //require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

        spt: space-tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
            //require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

// ------------------------- MOD-MORPHS --------------------------------
        // mm_you: mm_you {
        //     compatible = "zmk,behavior-mod-morph";
        //     #binding-cells = <0>;
        //     bindings = <&mlc_you>, <&muc_you>;
        //     mods = <(MOD_LSFT)>;
        // };

        // mm_the: mm_the {
        //     compatible = "zmk,behavior-mod-morph";
        //     #binding-cells = <0>;
        //     bindings = <&mlc_the>, <&muc_the>;
        //     mods = <(MOD_LSFT)>;
        // };

    };

    keymap {
        compatible = "zmk,keymap";

                base_layer {
// -------------------------------    -------------------------------
// |  P  |  C  |  M  |  L  |  W  |    |  F  |  H  |  O  |  U  |  Y  |
// |  N  |  S  |  T  |  R  |  J  |    |  B  |  D  |  A  |  E  |  I  |
// | wCP |  G  |  V  |  Z  |  <  |    |  >  |  K  |  X  |  Q  | mCP |
//            | _SYM(BSPC) |  =  |    |  +  | _NAV(SPC) |
                        bindings = <
   &kp P        &kp C        &kp M       &kp L        &kp W       &kp F  &kp H        &kp O       &kp U        &kp Y
   &hml LALT N  &hml LCTRL S &hml LGUI T &hsl LSHFT R &kp J       &kp B  &hsr LSHFT D &hmr LGUI A &hmr LCTRL E &hmr LALT I
   &win_cp      &kp G        &kp V       &kp Z        &kp LT      &kp GT &kp K        &kp X       &kp Q        &mac_cp
                             &bst _SYM BSPC  &bst _NAV EQUAL      &spt _SYM PLUS  &spt _NAV SPACE
                        >;
                };

                nav_layer {
// -------------------------------    ----------------------------------
// |  5  |  6  |  7  |  8  | INS |    | pUP | HOME |  UP  | END  | ESC |
// |  1  |  2  |  3  |  4  | PSC |    | pDN | LEFT | SPC  | RGHT | RET |
// |  v. | , . |  9  |  0  |  v- |    |  v+ | TAB  | DOWN | DEL  | APP |
//            | _SYM(BSPC) |     |    |     | SHFT |
                        bindings = <
   &kp N5        &kp N6        &kp N7       &kp N8        &kp INS         &kp PG_UP    &kp HOME        &kp UP          &kp END          &kp ESC
   &hml LALT N1  &hml LCTRL N2 &hml LGUI N3 &hsl LSHFT N4 &kp PSCRN       &kp PG_DN    &hsr LSHFT LEFT &hmr LGUI SPACE &hmr LCTRL RIGHT &hmr LALT RET
   &kp C_MUTE    &kp KP_DOT    &kp N9       &kp N0        &kp C_VOL_DN    &kp C_VOL_UP &kp TAB         &kp DOWN        &kp DEL          &kp K_APP
                                           &bst _SYM BSPC &none           &none  &kp LSHFT
                        >;
                };
                
                sym_layer {
// -------------------------------    -------------------------------
// |  \  |  |  |  _  |  =  |  {  |    |  }  |  "  |  ;  |  :  |  !  |
// |  /  |  *  |  -  |  +  |  (  |    |  )  |  '  |  ,  |  .  |  ?  |
// |  `  |  &  |  ^  |  %  |  [  |    |  ]  |  @  |  #  |  $  |  ~  |
//                  | BSPC |     |    |     | _NAV(SPC) |
                        bindings = <
   &kp BSLH        &kp PIPE        &kp UNDER       &kp EQUAL       &kp LBRC      &kp RBRC &kp DQT        &kp SEMI        &kp COLON      &kp EXCL
   &hml LALT SLASH &hml LCTRL STAR &hml LGUI MINUS &hsl LSHFT PLUS &kp LPAR      &kp RPAR &hsr LSHFT SQT &hmr LGUI COMMA &hmr LCTRL DOT &hmr LALT QMARK
   &kp GRAVE       &kp AMPS        &kp CARET       &kp PRCNT       &kp LBKT      &kp RBKT &kp AT         &kp HASH        &kp DLLR       &kp TILDE
                                                         &kp BSPC  &none         &none   &spt _NAV SPACE
                        >;
                };
                
                btf_layer {
// -------------------------------    -----------------------------
// | BT1 | BT2 | BT3 | BT4 | BT5 |    |    | F1 | F2  | F3  | F4  |    
// | ALT | CTL | GUI | SFT | USB |    |    | F5 | F6  | F7  | F8  |
// | CLR |  v. |  v- |  v+ | RGB |    |    | F9 | F10 | F11 | F12 |
//                   |     |     |    |    |     |
                        bindings = <
   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4       &none  &kp F1  &kp F2  &kp F3  &kp F4       
   &kp LALT     &kp LCTRL    &kp LGUI     &kp LSHFT    &out OUT_TOG       &none  &kp F5  &kp F6  &kp F7  &kp F8     
   &bt BT_CLR   &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP &rgb_ug RGB_TOG    &none  &kp F9  &kp F10 &kp F11 &kp F12
                                                    &none   &none         &none  &none
                        >;
                };       

                extra1 {
                        status = "reserved";
                };

                extra2 {
                        status = "reserved";
                };         
    };
};
